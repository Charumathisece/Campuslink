{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Box, Container, Typography, Card, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, TextField, MenuItem, Button } from '@mui/material';\n// import { Edit, Delete } from '@mui/icons-material';\n// import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n// import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\n// import { format } from 'date-fns';\n\n// const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n// const timeSlots = ['08:00-09:30', '09:30-11:00', '11:00-12:30', '12:30-14:00', '14:00-15:30', '15:30-17:00'];\n\n// const defaultTimetable = Array(days.length).fill().map(() => Array(timeSlots.length).fill({ subject: '' }));\n\n// const getInitialData = () => {\n//   const saved = localStorage.getItem('studentTimetableV2');\n//   if (saved) return JSON.parse(saved);\n//   return { tasksByDate: {}, timetableByDate: {} };\n// };\n\n// const Timetable = () => {\n//   const [selectedDate, setSelectedDate] = useState(new Date());\n//   const [taskForm, setTaskForm] = useState({ name: '', duration: 1 });\n//   const [step, setStep] = useState('input');\n//   const [editCell, setEditCell] = useState(null); // { dayIndex, timeIndex }\n//   const [form, setForm] = useState({ subject: '' });\n//   const [data, setData] = useState(getInitialData());\n\n//   // Format date as yyyy-MM-dd for keying\n//   const dateKey = format(selectedDate, 'yyyy-MM-dd');\n//   const tasks = data.tasksByDate[dateKey] || [];\n//   const timetable = data.timetableByDate[dateKey] || defaultTimetable;\n\n//   useEffect(() => {\n//     localStorage.setItem('studentTimetableV2', JSON.stringify(data));\n//   }, [data]);\n\n//   const handleEdit = (dayIndex, timeIndex) => {\n//     setEditCell({ dayIndex, timeIndex });\n//     setForm({ subject: timetable[dayIndex][timeIndex].subject });\n//   };\n\n//   const handleDelete = (dayIndex, timeIndex) => {\n//     const updated = timetable.map((row, d) =>\n//       row.map((cell, t) => (d === dayIndex && t === timeIndex ? { subject: '' } : cell))\n//     );\n//     setData(prev => ({\n//       ...prev,\n//       timetableByDate: { ...prev.timetableByDate, [dateKey]: updated }\n//     }));\n//   };\n\n//   const handleDialogClose = () => {\n//     setEditCell(null);\n//     setForm({ subject: '' });\n//   };\n\n//   const handleFormChange = (e) => {\n//     setForm({ ...form, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSave = () => {\n//     const updated = timetable.map((row, d) =>\n//       row.map((cell, t) => (d === editCell.dayIndex && t === editCell.timeIndex ? { subject: form.subject } : cell))\n//     );\n//     setData(prev => ({\n//       ...prev,\n//       timetableByDate: { ...prev.timetableByDate, [dateKey]: updated }\n//     }));\n//     handleDialogClose();\n//   };\n\n//   const handleTaskFormChange = (e) => {\n//     setTaskForm({ ...taskForm, [e.target.name]: e.target.value });\n//   };\n\n//   const handleAddTask = () => {\n//     if (!taskForm.name.trim() || !taskForm.duration) return;\n//     setData(prev => {\n//       const prevTasks = prev.tasksByDate[dateKey] || [];\n//       return {\n//         ...prev,\n//         tasksByDate: {\n//           ...prev.tasksByDate,\n//           [dateKey]: [...prevTasks, { name: taskForm.name.trim(), duration: Number(taskForm.duration) }]\n//         }\n//       };\n//     });\n//     setTaskForm({ name: '', duration: 1 });\n//   };\n\n//   const handleDeleteTask = (idx) => {\n//     setData(prev => {\n//       const prevTasks = prev.tasksByDate[dateKey] || [];\n//       return {\n//         ...prev,\n//         tasksByDate: {\n//           ...prev.tasksByDate,\n//           [dateKey]: prevTasks.filter((_, i) => i !== idx)\n//         }\n//       };\n//     });\n//   };\n\n//   const handleGenerateTimetable = () => {\n//     let flatSlots = [];\n//     for (let d = 0; d < days.length; d++) {\n//       for (let t = 0; t < timeSlots.length; t++) {\n//         flatSlots.push({ d, t });\n//       }\n//     }\n//     let slotIdx = 0;\n//     const newTable = Array(days.length).fill().map(() => Array(timeSlots.length).fill({ subject: '' }));\n//     for (const task of tasks) {\n//       for (let i = 0; i < task.duration && slotIdx < flatSlots.length; i++) {\n//         const { d, t } = flatSlots[slotIdx++];\n//         newTable[d][t] = { subject: task.name };\n//       }\n//     }\n//     setData(prev => ({\n//       ...prev,\n//       timetableByDate: { ...prev.timetableByDate, [dateKey]: newTable }\n//     }));\n//     setStep('timetable');\n//   };\n\n//   return (\n//     <Box sx={{ background: 'linear-gradient(135deg, #f8fafc 0%, #e0eafc 100%)', minHeight: '100vh', py: 6 }}>\n//       <Container maxWidth=\"lg\">\n//         <Card sx={{ borderRadius: 5, boxShadow: 6, p: 4, background: 'rgba(255,255,255,0.98)' }}>\n//           <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ fontWeight: 800, color: '#1a237e', letterSpacing: 1, mb: 1 }}>\n//             Time Scheduler\n//           </Typography>\n//           <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 4, fontSize: 18 }}>\n//             Select a date, assign tasks, and generate your timetable for that day\n//           </Typography>\n//           <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 4, alignItems: 'flex-start', mb: 4 }}>\n//             <LocalizationProvider dateAdapter={AdapterDateFns}>\n//               <DateCalendar value={selectedDate} onChange={setSelectedDate} sx={{ maxWidth: 340, borderRadius: 3, boxShadow: 2, background: '#f8fafc' }} />\n//             </LocalizationProvider>\n//             <Box sx={{ flex: 1 }}>\n//               {step === 'input' && (\n//                 <>\n//                   <Typography variant=\"h6\" sx={{ fontWeight: 700, mb: 2, color: '#3949ab' }}>Tasks for {dateKey}</Typography>\n//                   <Grid container spacing={2} alignItems=\"center\" sx={{ mb: 2 }}>\n//                     <Grid item xs={12} sm={6} md={5}>\n//                       <TextField label=\"Task Name\" name=\"name\" value={taskForm.name} onChange={handleTaskFormChange} fullWidth />\n//                     </Grid>\n//                     <Grid item xs={8} sm={4} md={3}>\n//                       <TextField label=\"Duration (slots)\" name=\"duration\" type=\"number\" value={taskForm.duration} onChange={handleTaskFormChange} fullWidth inputProps={{ min: 1, max: days.length * timeSlots.length }} />\n//                     </Grid>\n//                     <Grid item xs={4} sm={2} md={2}>\n//                       <Button variant=\"contained\" color=\"primary\" onClick={handleAddTask} sx={{ height: '100%', fontWeight: 600 }}>Add Task</Button>\n//                     </Grid>\n//                   </Grid>\n//                   <Box sx={{ mb: 2 }}>\n//                     {tasks.length > 0 && (\n//                       <Box>\n//                         <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, mb: 1 }}>Tasks to Schedule:</Typography>\n//                         <Grid container spacing={1}>\n//                           {tasks.map((task, idx) => (\n//                             <Grid item key={idx} xs={12} sm={6} md={4}>\n//                               <Card sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between', borderRadius: 3, boxShadow: 2 }}>\n//                                 <span><b>{task.name}</b> ({task.duration} slot{task.duration > 1 ? 's' : ''})</span>\n//                                 <Button color=\"error\" size=\"small\" onClick={() => handleDeleteTask(idx)}>Delete</Button>\n//                               </Card>\n//                             </Grid>\n//                           ))}\n//                         </Grid>\n//                       </Box>\n//                     )}\n//                   </Box>\n//                   <Button variant=\"contained\" color=\"success\" onClick={handleGenerateTimetable} disabled={tasks.length === 0} sx={{ mt: 2, fontWeight: 700, fontSize: 18, px: 4 }}>\n//                     Generate Timetable\n//                   </Button>\n//                 </>\n//               )}\n//               {step === 'timetable' && (\n//                 <>\n//                   <TableContainer component={Paper} sx={{ borderRadius: 3, boxShadow: 2, mb: 2 }}>\n//                     <Table>\n//                       <TableHead>\n//                         <TableRow sx={{ background: 'linear-gradient(90deg, #a1c4fd 0%, #c2e9fb 100%)' }}>\n//                           <TableCell sx={{ fontWeight: 700, fontSize: 17, color: '#263238' }}>Time</TableCell>\n//                           {days.map((day, index) => (\n//                             <TableCell key={index} align=\"center\" sx={{ fontWeight: 700, fontSize: 17, color: '#263238' }}>{day}</TableCell>\n//                           ))}\n//                         </TableRow>\n//                       </TableHead>\n//                       <TableBody>\n//                         {timeSlots.map((time, rowIndex) => (\n//                           <TableRow key={rowIndex}>\n//                             <TableCell sx={{ fontWeight: 600, fontSize: 15, background: '#f0f4fa' }}>{time}</TableCell>\n//                             {days.map((_, dayIndex) => (\n//                               <TableCell key={dayIndex} align=\"center\" sx={{ position: 'relative', minWidth: 180, background: '#f9fbfd', border: '1px solid #e3eaf2' }}>\n//                                 <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5, alignItems: 'center', minHeight: 70, justifyContent: 'center' }}>\n//                                   <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontWeight: 600, fontSize: 15 }}>\n//                                     {timetable[dayIndex][rowIndex].subject || <span style={{ color: '#b0b0b0' }}>No Class</span>}\n//                                   </Typography>\n//                                   <Box sx={{ mt: 1 }}>\n//                                     <IconButton size=\"small\" color=\"primary\" onClick={() => handleEdit(dayIndex, rowIndex)} sx={{ mr: 1, background: '#e3eafc', '&:hover': { background: '#bbdefb' } }}>\n//                                       <Edit fontSize=\"small\" />\n//                                     </IconButton>\n//                                     <IconButton size=\"small\" color=\"error\" onClick={() => handleDelete(dayIndex, rowIndex)} sx={{ background: '#ffebee', '&:hover': { background: '#ffcdd2' } }}>\n//                                       <Delete fontSize=\"small\" />\n//                                     </IconButton>\n//                                   </Box>\n//                                 </Box>\n//                               </TableCell>\n//                             ))}\n//                           </TableRow>\n//                         ))}\n//                       </TableBody>\n//                     </Table>\n//                   </TableContainer>\n//                   <Button variant=\"outlined\" color=\"primary\" onClick={() => setStep('input')} sx={{ mt: 2, fontWeight: 600 }}>\n//                     Back to Task Input\n//                   </Button>\n//                 </>\n//               )}\n//               {/* Edit Dialog */}\n//               <Dialog open={!!editCell} onClose={handleDialogClose} PaperProps={{ sx: { borderRadius: 4, p: 1 } }}>\n//                 <DialogTitle sx={{ fontWeight: 700, color: '#1a237e', pb: 1 }}>Edit Schedule</DialogTitle>\n//                 <DialogContent sx={{ minWidth: 350, background: '#f8fafc', borderRadius: 2 }}>\n//                   <TextField\n//                     margin=\"dense\"\n//                     label=\"Subject\"\n//                     name=\"subject\"\n//                     value={form.subject}\n//                     onChange={handleFormChange}\n//                     fullWidth\n//                     select\n//                     sx={{ mb: 2 }}\n//                   >\n//                     <MenuItem value=\"\">No Class</MenuItem>\n//                     <MenuItem value=\"Mathematics\">Mathematics</MenuItem>\n//                     <MenuItem value=\"Physics\">Physics</MenuItem>\n//                     <MenuItem value=\"Chemistry\">Chemistry</MenuItem>\n//                     <MenuItem value=\"Computer Science\">Computer Science</MenuItem>\n//                     <MenuItem value=\"Electronics\">Electronics</MenuItem>\n//                     <MenuItem value=\"Lunch Break\">Lunch Break</MenuItem>\n//                   </TextField>\n//                 </DialogContent>\n//                 <DialogActions sx={{ background: '#f8fafc', borderBottomLeftRadius: 16, borderBottomRightRadius: 16 }}>\n//                   <Button onClick={handleDialogClose} sx={{ fontWeight: 600 }}>Cancel</Button>\n//                   <Button onClick={handleSave} variant=\"contained\" sx={{ fontWeight: 600, background: '#1976d2' }}>Save</Button>\n//                 </DialogActions>\n//               </Dialog>\n//             </Box>\n//           </Box>\n//         </Card>\n//       </Container>\n//     </Box>\n//   );\n// };\n\n// export default Timetable;","map":{"version":3,"names":[],"sources":["E:/client/src/pages/Timetable.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Box, Container, Typography, Card, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, TextField, MenuItem, Button } from '@mui/material';\n// import { Edit, Delete } from '@mui/icons-material';\n// import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n// import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\n// import { format } from 'date-fns';\n\n// const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n// const timeSlots = ['08:00-09:30', '09:30-11:00', '11:00-12:30', '12:30-14:00', '14:00-15:30', '15:30-17:00'];\n\n// const defaultTimetable = Array(days.length).fill().map(() => Array(timeSlots.length).fill({ subject: '' }));\n\n// const getInitialData = () => {\n//   const saved = localStorage.getItem('studentTimetableV2');\n//   if (saved) return JSON.parse(saved);\n//   return { tasksByDate: {}, timetableByDate: {} };\n// };\n\n// const Timetable = () => {\n//   const [selectedDate, setSelectedDate] = useState(new Date());\n//   const [taskForm, setTaskForm] = useState({ name: '', duration: 1 });\n//   const [step, setStep] = useState('input');\n//   const [editCell, setEditCell] = useState(null); // { dayIndex, timeIndex }\n//   const [form, setForm] = useState({ subject: '' });\n//   const [data, setData] = useState(getInitialData());\n\n//   // Format date as yyyy-MM-dd for keying\n//   const dateKey = format(selectedDate, 'yyyy-MM-dd');\n//   const tasks = data.tasksByDate[dateKey] || [];\n//   const timetable = data.timetableByDate[dateKey] || defaultTimetable;\n\n//   useEffect(() => {\n//     localStorage.setItem('studentTimetableV2', JSON.stringify(data));\n//   }, [data]);\n\n//   const handleEdit = (dayIndex, timeIndex) => {\n//     setEditCell({ dayIndex, timeIndex });\n//     setForm({ subject: timetable[dayIndex][timeIndex].subject });\n//   };\n\n//   const handleDelete = (dayIndex, timeIndex) => {\n//     const updated = timetable.map((row, d) =>\n//       row.map((cell, t) => (d === dayIndex && t === timeIndex ? { subject: '' } : cell))\n//     );\n//     setData(prev => ({\n//       ...prev,\n//       timetableByDate: { ...prev.timetableByDate, [dateKey]: updated }\n//     }));\n//   };\n\n//   const handleDialogClose = () => {\n//     setEditCell(null);\n//     setForm({ subject: '' });\n//   };\n\n//   const handleFormChange = (e) => {\n//     setForm({ ...form, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSave = () => {\n//     const updated = timetable.map((row, d) =>\n//       row.map((cell, t) => (d === editCell.dayIndex && t === editCell.timeIndex ? { subject: form.subject } : cell))\n//     );\n//     setData(prev => ({\n//       ...prev,\n//       timetableByDate: { ...prev.timetableByDate, [dateKey]: updated }\n//     }));\n//     handleDialogClose();\n//   };\n\n//   const handleTaskFormChange = (e) => {\n//     setTaskForm({ ...taskForm, [e.target.name]: e.target.value });\n//   };\n\n//   const handleAddTask = () => {\n//     if (!taskForm.name.trim() || !taskForm.duration) return;\n//     setData(prev => {\n//       const prevTasks = prev.tasksByDate[dateKey] || [];\n//       return {\n//         ...prev,\n//         tasksByDate: {\n//           ...prev.tasksByDate,\n//           [dateKey]: [...prevTasks, { name: taskForm.name.trim(), duration: Number(taskForm.duration) }]\n//         }\n//       };\n//     });\n//     setTaskForm({ name: '', duration: 1 });\n//   };\n\n//   const handleDeleteTask = (idx) => {\n//     setData(prev => {\n//       const prevTasks = prev.tasksByDate[dateKey] || [];\n//       return {\n//         ...prev,\n//         tasksByDate: {\n//           ...prev.tasksByDate,\n//           [dateKey]: prevTasks.filter((_, i) => i !== idx)\n//         }\n//       };\n//     });\n//   };\n\n//   const handleGenerateTimetable = () => {\n//     let flatSlots = [];\n//     for (let d = 0; d < days.length; d++) {\n//       for (let t = 0; t < timeSlots.length; t++) {\n//         flatSlots.push({ d, t });\n//       }\n//     }\n//     let slotIdx = 0;\n//     const newTable = Array(days.length).fill().map(() => Array(timeSlots.length).fill({ subject: '' }));\n//     for (const task of tasks) {\n//       for (let i = 0; i < task.duration && slotIdx < flatSlots.length; i++) {\n//         const { d, t } = flatSlots[slotIdx++];\n//         newTable[d][t] = { subject: task.name };\n//       }\n//     }\n//     setData(prev => ({\n//       ...prev,\n//       timetableByDate: { ...prev.timetableByDate, [dateKey]: newTable }\n//     }));\n//     setStep('timetable');\n//   };\n\n//   return (\n//     <Box sx={{ background: 'linear-gradient(135deg, #f8fafc 0%, #e0eafc 100%)', minHeight: '100vh', py: 6 }}>\n//       <Container maxWidth=\"lg\">\n//         <Card sx={{ borderRadius: 5, boxShadow: 6, p: 4, background: 'rgba(255,255,255,0.98)' }}>\n//           <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ fontWeight: 800, color: '#1a237e', letterSpacing: 1, mb: 1 }}>\n//             Time Scheduler\n//           </Typography>\n//           <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 4, fontSize: 18 }}>\n//             Select a date, assign tasks, and generate your timetable for that day\n//           </Typography>\n//           <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 4, alignItems: 'flex-start', mb: 4 }}>\n//             <LocalizationProvider dateAdapter={AdapterDateFns}>\n//               <DateCalendar value={selectedDate} onChange={setSelectedDate} sx={{ maxWidth: 340, borderRadius: 3, boxShadow: 2, background: '#f8fafc' }} />\n//             </LocalizationProvider>\n//             <Box sx={{ flex: 1 }}>\n//               {step === 'input' && (\n//                 <>\n//                   <Typography variant=\"h6\" sx={{ fontWeight: 700, mb: 2, color: '#3949ab' }}>Tasks for {dateKey}</Typography>\n//                   <Grid container spacing={2} alignItems=\"center\" sx={{ mb: 2 }}>\n//                     <Grid item xs={12} sm={6} md={5}>\n//                       <TextField label=\"Task Name\" name=\"name\" value={taskForm.name} onChange={handleTaskFormChange} fullWidth />\n//                     </Grid>\n//                     <Grid item xs={8} sm={4} md={3}>\n//                       <TextField label=\"Duration (slots)\" name=\"duration\" type=\"number\" value={taskForm.duration} onChange={handleTaskFormChange} fullWidth inputProps={{ min: 1, max: days.length * timeSlots.length }} />\n//                     </Grid>\n//                     <Grid item xs={4} sm={2} md={2}>\n//                       <Button variant=\"contained\" color=\"primary\" onClick={handleAddTask} sx={{ height: '100%', fontWeight: 600 }}>Add Task</Button>\n//                     </Grid>\n//                   </Grid>\n//                   <Box sx={{ mb: 2 }}>\n//                     {tasks.length > 0 && (\n//                       <Box>\n//                         <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, mb: 1 }}>Tasks to Schedule:</Typography>\n//                         <Grid container spacing={1}>\n//                           {tasks.map((task, idx) => (\n//                             <Grid item key={idx} xs={12} sm={6} md={4}>\n//                               <Card sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between', borderRadius: 3, boxShadow: 2 }}>\n//                                 <span><b>{task.name}</b> ({task.duration} slot{task.duration > 1 ? 's' : ''})</span>\n//                                 <Button color=\"error\" size=\"small\" onClick={() => handleDeleteTask(idx)}>Delete</Button>\n//                               </Card>\n//                             </Grid>\n//                           ))}\n//                         </Grid>\n//                       </Box>\n//                     )}\n//                   </Box>\n//                   <Button variant=\"contained\" color=\"success\" onClick={handleGenerateTimetable} disabled={tasks.length === 0} sx={{ mt: 2, fontWeight: 700, fontSize: 18, px: 4 }}>\n//                     Generate Timetable\n//                   </Button>\n//                 </>\n//               )}\n//               {step === 'timetable' && (\n//                 <>\n//                   <TableContainer component={Paper} sx={{ borderRadius: 3, boxShadow: 2, mb: 2 }}>\n//                     <Table>\n//                       <TableHead>\n//                         <TableRow sx={{ background: 'linear-gradient(90deg, #a1c4fd 0%, #c2e9fb 100%)' }}>\n//                           <TableCell sx={{ fontWeight: 700, fontSize: 17, color: '#263238' }}>Time</TableCell>\n//                           {days.map((day, index) => (\n//                             <TableCell key={index} align=\"center\" sx={{ fontWeight: 700, fontSize: 17, color: '#263238' }}>{day}</TableCell>\n//                           ))}\n//                         </TableRow>\n//                       </TableHead>\n//                       <TableBody>\n//                         {timeSlots.map((time, rowIndex) => (\n//                           <TableRow key={rowIndex}>\n//                             <TableCell sx={{ fontWeight: 600, fontSize: 15, background: '#f0f4fa' }}>{time}</TableCell>\n//                             {days.map((_, dayIndex) => (\n//                               <TableCell key={dayIndex} align=\"center\" sx={{ position: 'relative', minWidth: 180, background: '#f9fbfd', border: '1px solid #e3eaf2' }}>\n//                                 <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5, alignItems: 'center', minHeight: 70, justifyContent: 'center' }}>\n//                                   <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontWeight: 600, fontSize: 15 }}>\n//                                     {timetable[dayIndex][rowIndex].subject || <span style={{ color: '#b0b0b0' }}>No Class</span>}\n//                                   </Typography>\n//                                   <Box sx={{ mt: 1 }}>\n//                                     <IconButton size=\"small\" color=\"primary\" onClick={() => handleEdit(dayIndex, rowIndex)} sx={{ mr: 1, background: '#e3eafc', '&:hover': { background: '#bbdefb' } }}>\n//                                       <Edit fontSize=\"small\" />\n//                                     </IconButton>\n//                                     <IconButton size=\"small\" color=\"error\" onClick={() => handleDelete(dayIndex, rowIndex)} sx={{ background: '#ffebee', '&:hover': { background: '#ffcdd2' } }}>\n//                                       <Delete fontSize=\"small\" />\n//                                     </IconButton>\n//                                   </Box>\n//                                 </Box>\n//                               </TableCell>\n//                             ))}\n//                           </TableRow>\n//                         ))}\n//                       </TableBody>\n//                     </Table>\n//                   </TableContainer>\n//                   <Button variant=\"outlined\" color=\"primary\" onClick={() => setStep('input')} sx={{ mt: 2, fontWeight: 600 }}>\n//                     Back to Task Input\n//                   </Button>\n//                 </>\n//               )}\n//               {/* Edit Dialog */}\n//               <Dialog open={!!editCell} onClose={handleDialogClose} PaperProps={{ sx: { borderRadius: 4, p: 1 } }}>\n//                 <DialogTitle sx={{ fontWeight: 700, color: '#1a237e', pb: 1 }}>Edit Schedule</DialogTitle>\n//                 <DialogContent sx={{ minWidth: 350, background: '#f8fafc', borderRadius: 2 }}>\n//                   <TextField\n//                     margin=\"dense\"\n//                     label=\"Subject\"\n//                     name=\"subject\"\n//                     value={form.subject}\n//                     onChange={handleFormChange}\n//                     fullWidth\n//                     select\n//                     sx={{ mb: 2 }}\n//                   >\n//                     <MenuItem value=\"\">No Class</MenuItem>\n//                     <MenuItem value=\"Mathematics\">Mathematics</MenuItem>\n//                     <MenuItem value=\"Physics\">Physics</MenuItem>\n//                     <MenuItem value=\"Chemistry\">Chemistry</MenuItem>\n//                     <MenuItem value=\"Computer Science\">Computer Science</MenuItem>\n//                     <MenuItem value=\"Electronics\">Electronics</MenuItem>\n//                     <MenuItem value=\"Lunch Break\">Lunch Break</MenuItem>\n//                   </TextField>\n//                 </DialogContent>\n//                 <DialogActions sx={{ background: '#f8fafc', borderBottomLeftRadius: 16, borderBottomRightRadius: 16 }}>\n//                   <Button onClick={handleDialogClose} sx={{ fontWeight: 600 }}>Cancel</Button>\n//                   <Button onClick={handleSave} variant=\"contained\" sx={{ fontWeight: 600, background: '#1976d2' }}>Save</Button>\n//                 </DialogActions>\n//               </Dialog>\n//             </Box>\n//           </Box>\n//         </Card>\n//       </Container>\n//     </Box>\n//   );\n// };\n\n// export default Timetable;\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}